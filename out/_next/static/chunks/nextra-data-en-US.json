{"/Programming/Python/virtualenv":{"title":"Virtualenv","data":{}},"/Programming/git/push_multiple":{"title":"Pushing to Multiple Git Remotes","data":{"":"Quick guide on pushing a local repo to both GitHub and Gitea (or any other remote). Useful for backing up code or working with different teams.","steps#Steps":"Create new repos on GitHub and Gitea\nSame repo name on both\nConfigure settings as needed\nAdd GitHub and Gitea as remotes in local repo\ngit remote add github https://github.com/username/repo.git\ngit remote add gitea https://gitea-instance.com/username/repo.git\nReplace username, repo, and gitea-instance.com with your own\nPush local repo to both remotes\ngit push github main\ngit push gitea main\nUse your default branch name if not main\nDouble-check that the code is on both GitHub and Gitea","how-it-works#How it works":"Git lets you have multiple remotes, each with its own name. Adding GitHub and Gitea as separate remotes means you can push to both at the same time.git push github main sends commits from local main to main on the GitHub remote. Same for Gitea.Handy for keeping code synced across different platforms for backup, collaboration, or using features of each service.","tips#Tips":"Make sure to change username, repo, and gitea-instance.com to your actual values\nIf you already pushed to one remote before adding the other, you might need to do this the first time:\ngit push --set-upstream gitea main\nTo make life easier, create a Git alias to push to both remotes at once:\ngit config --global alias.pushall '!git push github main && git push gitea main'\nThen just do git pushall\nAnd that's pretty much it! Now you can keep your code safe and synced on GitHub, Gitea, or any other remotes you want."}},"/about":{"title":"About Deck/Ops","data":{"":"Welcome to Deck/Ops, the ultimate destination for developers and gaming enthusiasts alike! Our mission is to bridge the gap between the worlds of DevOps and Steam Deck customization, providing a platform for learning, sharing, and innovating.","for-developers#For Developers":"At Deck/Ops, we believe in the power of continuous learning and improvement. Our site is dedicated to helping developers of all skill levels enhance their DevOps knowledge and skills through a wide range of tutorials, guides, and best practices. Whether you're a beginner looking to understand the fundamentals of DevOps or an experienced professional seeking to stay up-to-date with the latest trends and technologies, Deck/Ops has something for you.Our content covers various aspects of DevOps, including:\nContinuous Integration and Continuous Deployment (CI/CD)\nInfrastructure as Code (IaC)\nContainerization and Orchestration\nMonitoring and Logging\nCloud Computing\nAutomation and Configuration Management","for-steam-deck-enthusiasts#For Steam Deck Enthusiasts":"Deck/Ops is not just for developers; it's also a haven for Steam Deck enthusiasts who want to unlock the full potential of their devices. We provide a collection of scripts, tweaks, and customization guides that allow you to personalize and optimize your Steam Deck experience.Discover how to:\nCustomize your Steam Deck's interface and controls\nOptimize performance and battery life\nInstall and manage non-Steam games and applications\nTroubleshoot common issues and errors\nExplore advanced features and hidden settings","community-driven#Community-Driven":"At Deck/Ops, we foster a vibrant and inclusive community of developers and Steam Deck enthusiasts. We encourage our users to contribute their own tutorials, scripts, and experiences, creating a collaborative environment where knowledge is shared freely. Join our forums, participate in discussions, and connect with like-minded individuals who share your passion for DevOps and Steam Deck.","our-commitment#Our Commitment":"We are committed to providing high-quality, up-to-date, and reliable information to our users. Our content is carefully curated and reviewed by a team of experienced professionals to ensure accuracy and relevance. We value your feedback and continuously strive to improve our platform based on your needs and suggestions.Join us on this exciting journey of learning, discovery, and innovation at Deck/Ops. Whether you're here to enhance your DevOps skills or to unlock the full potential of your Steam Deck, we've got you covered.Happy exploring!The Deck/Ops Team"}},"/deck/downloads":{"title":"Downloads","data":{"":"You can find Steam Deck downloads here."}},"/deck/guides":{"title":"Guides","data":{"":"You can find Steam Deck guides here."}},"/deck/scripts":{"title":"Scripts","data":{"":"You can find Steam Deck scripts here."}},"/devops/Linux/cron":{"title":"Using Cron and Crontab to Run Scripts Automatically","data":{"":"Cron is a time-based job scheduler in Unix-like operating systems, and crontab is a file that contains a list of commands to be executed by cron at specified intervals.","basic-crontab-syntax#Basic Crontab Syntax":"A crontab entry consists of five fields, followed by the command to be executed:\n* * * * * command_to_execute\n│ │ │ │ │\n│ │ │ │ └─ Day of the Week (0-6, Sunday to Saturday)\n│ │ │ └─── Month of the Year (1-12)\n│ │ └───── Day of the Month (1-31)\n│ └─────── Hour (0-23)\n└───────── Minute (0-59)","editing-the-crontab#Editing the Crontab":"To edit the crontab, use the following command:\ncrontab -e\nIf prompted, choose an editor (e.g., nano).","examples#Examples":"","running-a-script-on-reboot#Running a Script on Reboot":"To run a script on reboot, use the @reboot keyword:\n@reboot /path/to/script.sh","running-a-script-every-30-minutes#Running a Script Every 30 Minutes":"To run a script every 30 minutes, use the following crontab entry:\n*/30 * * * * /path/to/script.sh","running-a-script-every-hour#Running a Script Every Hour":"To run a script every hour, use the following crontab entry:\n0 * * * * /path/to/script.sh","running-a-script-every-day#Running a Script Every Day":"To run a script every day at a specific time (e.g., 3:30 AM), use the following crontab entry:\n30 3 * * * /path/to/script.sh","additional-tips#Additional Tips":"Make sure the script has execute permissions:\nchmod +x /path/to/script.sh\nUse the full path to the script to avoid issues with PATH variables.\nRedirect the script's output and errors to a log file for debugging:\n*/30 * * * * /path/to/script.sh > /path/to/script.log 2>&1\nComments can be added to the crontab by prefixing the line with #.\nAfter saving the changes to the crontab, cron will automatically read the updated file and start executing the scheduled tasks."}},"/devops/Linux/setup":{"title":"Create an Ubuntu Server 22.04 VM using VirtualBox","data":{"":"This tutorial will guide you through the process of installing and setting up an Ubuntu Server 22.04 VM using VirtualBox, including the installation of guest tools.","prerequisites#Prerequisites":"VirtualBox installed on your host machine\nUbuntu Server 22.04 ISO image downloaded","steps#Steps":"Open VirtualBox and click on \"New\" to create a new virtual machine.\nName the VM \"Ubuntu Server 22.04\" and choose \"Linux\" as the type and \"Ubuntu (64-bit)\" as the version. Click \"Next\".\nAllocate at least 2048 MB of RAM (more if available) and click \"Next\".\nChoose \"Create a virtual hard disk now\" and click \"Create\".\nSelect \"VDI (VirtualBox Disk Image)\" and click \"Next\".\nChoose \"Dynamically allocated\" and click \"Next\".\nAllocate at least 20 GB of disk space and click \"Create\".\nRight-click on the newly created VM and select \"Settings\".\nIn the \"Storage\" section, click on the \"Empty\" CD icon under \"Controller: IDE\" and select the Ubuntu Server 22.04 ISO image. Click \"OK\".\nStart the VM and follow the Ubuntu Server installation prompts.\nOnce the installation is complete, reboot the VM and log in with your credentials.","installing-guest-additions#Installing Guest Additions":"In the VirtualBox menu, click on \"Devices\" and select \"Insert Guest Additions CD image\".\nIn the Ubuntu Server VM, run the following commands:\nsudo apt update\nsudo apt install build-essential dkms linux-headers-$(uname -r)\nsudo mount /dev/cdrom /media/cdrom\ncd /media/cdrom\nsudo ./VBoxLinuxAdditions.run\nReboot the VM for the changes to take effect:\nsudo reboot\nYour Ubuntu Server 22.04 VM is now set up and ready to use, with guest tools installed for better performance and integration with the host machine."}},"/devops/Windows/auto_powershell":{"title":"Running a PowerShell Script Automatically Using Task Scheduler","data":{"":"This guide will walk you through the process of setting up a PowerShell script to run automatically using the Windows Task Scheduler.","prerequisites#Prerequisites":"A PowerShell script that you want to run automatically.\nAdministrative access to the Windows machine.","steps#Steps":"Open the Task Scheduler:\nPress the Windows key + R to open the Run dialog.\nType \"taskschd.msc\" and press Enter.\nCreate a new task:\nIn the Task Scheduler, click on \"Create Task...\" in the Actions pane on the right.\nGive your task a name and description in the \"General\" tab.\nConfigure the trigger:\nSwitch to the \"Triggers\" tab and click \"New...\"\nChoose the desired trigger type (e.g., Daily, Weekly, Monthly, or a specific date/time).\nSet the trigger settings according to your requirements and click \"OK.\"\nConfigure the action:\nSwitch to the \"Actions\" tab and click \"New...\"\nIn the \"Action\" dropdown, select \"Start a program.\"\nIn the \"Program/script\" field, enter \"powershell.exe\"\nIn the \"Add arguments (optional)\" field, enter the following:\n-ExecutionPolicy Bypass -File \"C:\\Path\\To\\Your\\Script.ps1\"\nReplace \"C:\\Path\\To\\Your\\Script.ps1\" with the actual path to your PowerShell script.\nClick \"OK\" to save the action.\nSet additional settings (optional):\nIn the \"Conditions\" tab, you can specify additional conditions for the task to run, such as only running when the computer is idle or when a network connection is available.\nIn the \"Settings\" tab, you can configure additional settings, such as deleting the task if it is not scheduled to run again or running the task with the highest privileges.\nSave the task:\nClick \"OK\" to save the task.\nTest the task:\nRight-click on the newly created task and select \"Run.\"\nCheck if the PowerShell script executes as expected.","modifying-or-deleting-the-task#Modifying or Deleting the Task":"To modify the task, double-click on it in the Task Scheduler Library and make the necessary changes in the task properties.\nTo delete the task, right-click on it and select \"Delete.\"","notes#Notes":"Make sure the PowerShell script has the necessary permissions to run and that the user account under which the task runs has sufficient privileges to execute the script.\nIf the script requires administrative privileges, make sure to check the \"Run with highest privileges\" option in the \"General\" tab of the task properties.\nBe cautious when running scripts automatically, as they may have unintended consequences if not properly tested and validated.\nBy following these steps, you can set up a PowerShell script to run automatically using the Windows Task Scheduler, allowing you to automate various tasks and processes on your Windows machine."}},"/devops/Windows/powershell_policy":{"title":"Changing PowerShell Execution Policy","data":{"":"By default, PowerShell's execution policy is set to \"Restricted,\" which prevents the execution of PowerShell scripts. To allow a user to run any PowerShell script, you need to change the execution policy.","changing-the-execution-policy#Changing the Execution Policy":"Open PowerShell as an administrator.\nTo set the execution policy to \"Unrestricted,\" run the following command:\nSet-ExecutionPolicy Unrestricted\nWhen prompted, type \"Y\" and press Enter to confirm the change.\nExecution Policy Change\nThe execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at https://go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): Y\nVerify the new execution policy by running:\nGet-ExecutionPolicy\nThe output should be \"Unrestricted.\"","reverting-the-execution-policy-change#Reverting the Execution Policy Change":"To revert the execution policy change and restore the default \"Restricted\" policy:\nOpen PowerShell as an administrator.\nRun the following command:\nSet-ExecutionPolicy Restricted\nWhen prompted, type \"Y\" and press Enter to confirm the change.\nVerify the restored execution policy by running:\nGet-ExecutionPolicy\nThe output should be \"Restricted.\"","notes#Notes":"Changing the execution policy to \"Unrestricted\" allows the execution of any PowerShell script, which can be a security risk. Only do this if you trust the scripts you intend to run.\nAlternative execution policies, such as \"RemoteSigned\" or \"AllSigned,\" provide more security by requiring scripts to be digitally signed by a trusted publisher.\nThe execution policy change affects the current user. To change the policy for all users, use the \"-Scope\" parameter followed by \"LocalMachine\" or \"CurrentUser.\"\nAlways exercise caution when running scripts from untrusted sources, and make sure to understand the implications of changing the PowerShell execution policy."}},"/":{"title":"Deck/Ops","data":{"":"Use the sidebar to navigate the site.For Steam Deck related pages, go to Steam Deck"}}}